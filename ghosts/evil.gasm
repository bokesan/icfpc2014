;;; -*- mode: asm -*-
;;; file evil.gasm
;;; This program is dedicated to Xykon.
;;;
;;; Main idea is for all the ghosts to chase the lambda
;;; We offset ghosts into diagonal directions to increase the
;;; chance to surround the lambda.

; Memory layout
; -------------
;
;  0 - 7    offset table for moving (UP, RIGHT, DOWN, LEFT)
;  8 - 15   diagonal offsets (NE, SE, SW, NW)
; 29 - 33   scratch area for dead-end avoidance
;
; 200 - ...  locations of up to 10 power pills 
def powerOffs 200
def powerEnd  220
        
def myX [40]
def myY [41]
def myDir [42]
def myIndex [43]
def myStatus [44]
def lamX [45]
def lamY [46]

def savedX [47]
def savedY [48]

def distToLambda [49]           ; distance from me to lambda

def destX [50]                  ; current destination
def destY [51]

;;; fruit location, if known
def fruitX [52]
def fruitY [53]        
        
def shouldFlee [90]
def revDir  [91]


; Directions
def UP    0
def RIGHT 1
def DOWN  2
def LEFT  3

; Status
def FRIGHTENED 1


; absolute value of a. clobbers b
macro abs val, tmp
    if val >= 128
        mov tmp,val
        mov val,0
        sub val,tmp
    fi
endm

; put distance in steps between (a,b) and (c,d) into a
; clobbers e
macro distance
    sub a,c  ; delta x
    abs a, e
    sub c,d
    abs c, e
    add a,c
endm

; distance from me to lambda
macro setDistToLambda
    mov c, myX
    mov d, myY
    sys lambda1
    distance
    mov distToLambda,a
endm

;;; remove lambda loc from power pills
macro cleanPower_fast
        mov a,powerOffs
        do
                if [a] /= lamX
                        add a,2
                else
                        inc a
                        if [a] /= lamY
                                inc a
                        else
                                dec a
                                mov [a],0
                                add a,2
                        fi
                fi
        while a < powerEnd
endm

macro cleanPower
        mov c,powerOffs
        do
                mov a,[c]
                if a /= 0
                        inc c
                        mov b,[c]
                        sys map
                        if a /= 3
                                dec c
                                mov [c],0
                                inc c
                        fi
                        inc c
                else
                        add c,2
                fi
        while c < powerEnd
endm
        
;;; add power pill at myX,myY
macro addPower
        mov a,powerOffs
        do
                if [a] /= 0     ; used slot?
                        add a,2
                else
        		; set slot and stop 
                        mov [a], myX
                        inc a
                        mov [a], myY
                        mov a, powerEnd
                fi
        while a < powerEnd
endm

        
; a modulo b, clobbering c
macro mod a,b, c
    mov c, a
    div c, b
    mul c, b
    sub a, c
endm

; move x,y into direction.
; dir must not be indirect
; requires direction offsets at memory location 0-7 to be initialized
macro moveDir
    mul c,2
    add a,[c]
    inc c
    add b,[c]
    div c,2 ; restore original value
endm

; move two steps
macro moveDir2
    mul c,2
    add a,[c]
    add a,[c]
    inc c
    add b,[c]
    add b,[c]
    div c,2 ; restore original value
endm

; are we looking into a dead end?
; leaves e == 0 if not a dead end,
;    and e /= 0 if a dead end
; takes location in (a,b) and direction in c
; clobbers all registers
macro isDeadEnd
    mov e,0
    mov f,0 ; counter to limit iteration
    do
        moveDir        ; advance one step
        mov savedX,a        ; save location
        mov savedY,b
        sys map
        mov e,255 ; stop tag
        if a /= 0
            ; not a wall, test left and right
            mov e,0
            mov a,savedX  ; restore x
            inc c : and c,3  ; turn right
            moveDir
            mov d,a  ; save x
            sys map
            mov e,a  ; right cell contents
            mov a,d
            add c,2 : and c,3  ; turn around
            moveDir2
            mov d,a  ; save x
            sys map
            add e,a  ; add left cell contents
            ; if e > 0, we are not in a dead end
            inc c : and c,3 ; original direction
            mov a,savedX
            mov b,savedY
        fi
        inc f
        if f >= 5
            mov e,1
        fi
    while e == 0
    ; now, if e = 255, we have a dead end
    if e <= 254
        mov e,0
    fi
endm


; is a ghost with a lower index at the same position?
macro lowerGhostOnLoc
    sys index
    if a /= 0
        if a >= 6 ; dont waste too many cycles here
            mov a,5
        fi
        mov c,a
        mov f,0
        do
            dec c     ; next lower ghost
            mov a, c
            sys curpos
            mov f, 1    ; true
            if a /= myX : mov f,0 : fi
            if b /= myY : mov f,0 : fi
            if f /= 0 : mov c,0 : fi
        while c > 0
    fi
    mov a,f
endm

; choose direction to move:
;    c, if a > b
;    d, if a <= b
; move, then halt
macro movelarger
    if shouldFlee /= 0
        if a >= b
            mov e,d
            mov f,c
        else
            mov e,c
            mov f,d
        fi
        add e,2
        and e,3
        add f,2
        and f,3
    else
        if a >= b
            mov e,c
            mov f,d
        else
            mov e,d
            mov f,c
        fi
    fi
    ; direction e into wall? then f
    mov a,myX
    mov b,myY
    mov c,e
    moveDir
    sys map
    if a /= 0  ; no wall
        mov b,myDir
        add b,2
        and b,3
        if e /= b ; and not reverse of current
            mov a,e  ; better dir
        else
            mov a,f
        fi
    else
        mov a,f
    fi
    sys move
    hlt
endm


macro moveToDest
    if lamX <= myX
        ; lambda to the left
        mov d, LEFT
        mov b, myX
        sub b, lamX    ; b = delta X
        if lamY <= myY
            ; lambda is in upper left
            mov a, myY
            sub a, lamY    ; a = delta Y
            mov c,UP
        else
            ; lower left
            mov a, lamY
            sub a, myY    ; a = delta Y
            mov c,DOWN
        fi
    else
        ; lambda is to the right
        mov d, RIGHT
        mov b,lamX
        sub b,myX     ; b = delta X
        if lamY <= myY
            ; upper right
            mov a, myY
            sub a, lamY    ; a = delta Y
            mov c,UP
        else
            ; lower right
            mov a,lamY
            sub a,myY
            mov c,DOWN
        fi
    fi
    movelarger
endm

macro init
    ; initialize direction offsets
    mov [1], 255                ; 0,-1 : up
    mov [2], 1                  ; 1,0  : right
    mov [5], 1                  ; 0,1  : down
    mov [6], 255                ; -1,0 : left

    sys index
    mov myIndex,a
    sys curpos
    mov myX,a
    mov myY,b
    sys map
    if a >= 4
        if a <= 4
            mov fruitX,myY
            mov fruitY,myY
        fi
    fi
    mov a,myIndex
    sys status
    mov myStatus,a
    mov myDir,b
    sys lambda1
    mov lamX,a
    mov lamY,b
endm

;;; choose destination
;;; if we are near the lambda, move onto it
;;; further away: one step diag determined by ghost index
;;; even further away: two step diag
;;; ...
macro computeDest
        mov destX,lamX          ; start with lambda coords
        mov destY,lamY
        mov f, 0                ; offset factor
        mov a, distToLambda
        do while a >= 3
                inc f
                div a,2
        od
#if GHOST == 0
        mov a,1 : mov b,255
#endif
#if GHOST == 1
        mov a,1 : mov b,1
#endif
#if GHOST == 2
        mov a,255 : mov b,1
#endif
#if GHOST == 3
        mov a,255 : mov b,255
#endif
        mul a,f                 ; multiply by factor
        mul b,f                 ; if very near, factor == 0, so we target lambda
        add destX,a
        add destY,b
endm

        
; main entry point
    init
    ; lowerGhostOnLoc
    ; if a /= 0 : hlt : fi
    mov b, myDir
    add b,2
    and b,3
    mov revDir, b    ; opposite of current direction
    if myStatus /= 1
        mov shouldFlee,0
    else
        ; I'm frightened. Maybe I should flee
        ; But only if I'm near the lambda-man
        setDistToLambda
        if distToLambda <= P_FRIGHT
            mov shouldFlee, 2
        else
            mov shouldFlee, 0
        fi
    fi

    ; count directions which are not dead ends
    ; if we have only one, move in that direction
    ; we use 29 as counter, and 30 - 33 to mark dead ends
    mov [29],0
    mov [30],0
    mov [31],0
    mov [32],0
    mov [33],0
    mov c,0
    do
        mov a,myX
        mov b,myY
        isDeadEnd
        inc [29]
        if e /= 0
            mov d,c
            add d,30
            mov [d],1
            dec [29]
        fi
        if [29] >= 2
            mov c,4 ; exit loop
        fi
        inc c  ; next direction
    while c < 4
    if [29] /= 1
        computeDest
        moveToDest
        hlt
    fi
    ; only one non-dead-end. Use it
    mov a,29
    do
        inc a
    while [a] > 0
    sub a,30
    sys move
    hlt

; Xykon: "I think I just had an evilgasm". OOTS #197: A Change of Scale
